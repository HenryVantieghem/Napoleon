{
  "permissions": {
    "allow": [
      "Bash(npx create-next-app:*)",
      "Bash(npm install:*)",
      "Bash(npm run test:*)",
      "Bash(grep:*)",
      "Bash(npm run typecheck:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npm run build:*)",
      "Bash(rm:*)",
      "Bash(npm test:*)",
      "Bash(touch:*)",
      "Bash(chmod:*)",
      "Bash(npx tsx:*)",
      "Bash(vercel)",
      "Bash(vercel:*)",
      "Bash(curl:*)",
      "WebFetch(domain:napoleon-2la8becth-napoleon.vercel.app)",
      "Bash(./scripts/error-detection.sh:*)",
      "Bash(npx tsc:*)",
      "Bash(npx jest:*)",
      "Bash(npm run:*)",
      "Bash(cat:*)",
      "Bash(ls:*)",
      "Bash(git push:*)",
      "Bash(./scripts/setup-supabase.sh:*)",
      "WebFetch(domain:linear.app)",
      "WebFetch(domain:superhuman.com)",
      "WebFetch(domain:notion.so)",
      "WebFetch(domain:www.notion.com)",
      "WebFetch(domain:mercury.com)",
      "WebFetch(domain:napoleon-vebn7naz1-napoleon.vercel.app)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:medium.com)",
      "WebFetch(domain:github.com)",
      "Bash(mkdir:*)",
      "Bash(pip install:*)",
      "Bash(SuperClaude install --profile developer)",
      "Bash(python3:*)",
      "Bash(SuperClaude --help)",
      "Bash(SuperClaude install --profile developer --yes)",
      "mcp__sequential-thinking__sequentialthinking",
      "WebFetch(domain:napoleon-6ocsjs9fk-napoleon.vercel.app)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "Bash(npm uninstall:*)",
      "WebFetch(domain:napoleon-cckfxq3u5-napoleon.vercel.app)",
      "Bash(find:*)",
      "WebFetch(domain:napoleon-2jryrf2uv-napoleon.vercel.app)",
      "WebFetch(domain:www.pinterest.com)",
      "WebFetch(domain:www.cartier.com)",
      "WebFetch(domain:www.cosmos.so)",
      "Bash(cp:*)",
      "Bash(# Move luxury UI components\nmv src/components/ui/luxury-motion.tsx src/components/luxury-ui/\nmv src/components/ui/particle-background.tsx src/components/luxury-ui/\nmv src/components/ui/orbital-background.tsx src/components/luxury-ui/\nmv src/components/ui/glass-card.tsx src/components/luxury-ui/\nmv src/components/landing/Starfield.tsx src/components/luxury-ui/\nmv src/components/landing/OrbitalGlow.tsx src/components/luxury-ui/\nmv src/components/dashboard/KineticParticles.tsx src/components/luxury-ui/\n\n# Move email components  \nmv src/components/dashboard/EmailList.tsx src/components/email/\nmv src/components/dashboard/EmailRow.tsx src/components/email/\nmv src/components/dashboard/ThreadList.tsx src/components/email/\nmv src/components/dashboard/ThreadCard.tsx src/components/email/\nmv src/components/dashboard/PriorityBadge.tsx src/components/email/\n\n# Move shared components\nmv src/components/dashboard/LoadingSkeleton.tsx src/components/shared/\nmv src/components/dashboard/LoadingState.tsx src/components/shared/\nmv src/components/dashboard/EmptyState.tsx src/components/shared/\nmv src/components/dashboard/ErrorState.tsx src/components/shared/\nmv src/components/error-boundary.tsx src/components/shared/\n\n# Dashboard stays in dashboard\n# Auth stays in auth\n\necho \"\"Components reorganized\"\")",
      "Bash(# Move lib files to organized folders\nmv src/lib/gmail-auth.ts src/lib/auth/\nmv src/lib/gmail-client.ts src/lib/gmail-api/\nmv src/lib/openai-analyzer.ts src/lib/ai/\nmv src/lib/priority-scorer.ts src/lib/ai/\nmv src/lib/types.ts src/lib/types/index.ts\nmv src/lib/utils.ts src/lib/utils/index.ts\nmv src/lib/slack-client.ts src/lib/gmail-api/\nmv src/lib/teams-client.ts src/lib/gmail-api/\n\necho \"\"Lib files reorganized\"\")",
      "Bash(true)",
      "Bash(tree:*)",
      "Bash(npm audit:*)",
      "Bash(npm outdated)",
      "Bash(npx next build:*)",
      "Bash(ANALYZE=true npm run build)",
      "Bash(pkill:*)",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_close",
      "Bash(git checkout:*)",
      "Bash(git rev-parse:*)",
      "Bash(./scripts/debug-oauth.sh:*)",
      "Bash(git reset:*)",
      "WebFetch(domain:napoleonai.app)",
      "Bash(mv:*)",
      "Bash(git ls-tree:*)",
      "Bash(echo \"=== VERCEL PROJECT VERIFICATION ===\" vercel list)",
      "Bash(git config:*)",
      "Bash(# Add ALL modified files\ngit add .\n\n# Verify all changes are staged\ngit status\necho \"\"Staged files: $(git diff --cached --name-only | wc -l)\"\")",
      "Bash(# Create detailed commit message\ngit commit -m \"\"üö® CRITICAL OAUTH FIX: Complete Gmail and Slack OAuth integration flows\n\n‚úÖ PRODUCTION-GRADE OAUTH IMPLEMENTATION:\n‚Ä¢ GmailConnect component with proper OAuth redirect (no page refresh)\n‚Ä¢ SlackConnect component with direct workspace connection\n‚Ä¢ Updated Gmail callback route with secure token storage and expiry tracking\n‚Ä¢ Connection status detection system with real OAuth token validation\n‚Ä¢ Executive-grade UI with clear connection status and instructions\n\nüîß TECHNICAL IMPROVEMENTS:\n‚Ä¢ Proper OAuth state management and CSRF protection\n‚Ä¢ HTTP-only cookies for secure token storage (90-day refresh tokens)\n‚Ä¢ Real-time connection detection based on actual tokens\n‚Ä¢ Production-ready error handling with meaningful user feedback\n‚Ä¢ Self-service OAuth flows eliminating manual IT setup\n\nüéØ EXECUTIVE VALUE:\n‚Ä¢ Fortune 500 executives connect Gmail + Slack without IT support\n‚Ä¢ Persistent authentication with refresh tokens (no hourly re-auth)\n‚Ä¢ Clear visual feedback on connection status with executive messaging\n‚Ä¢ One-click OAuth flows redirecting to proper consent screens\n\nüö® CRITICAL SUCCESS: OAuth buttons now redirect to Google/Slack consent\nscreens (not page refresh). Complete self-service executive experience.\n\nAll OAuth flows tested locally and ready for production deployment.\n\nü§ñ Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\"\")",
      "Bash(# CRITICAL: Push to GitHub (Vercel deploys FROM GitHub)\necho \"\"=== PUSHING TO GITHUB ===\"\"\ngit push origin main\n\n# VERIFY push was successful\necho \"\"=== PUSH VERIFICATION ===\"\"\ngit log --oneline -2\ngit status\necho \"\"‚úÖ Push completed - GitHub has latest OAuth implementation\"\")",
      "Bash(# Verify GitHub has your changes\necho \"\"=== GITHUB REMOTE VERIFICATION ===\"\"\nsleep 5  # Wait for GitHub to process\nLATEST_COMMIT=$(git rev-parse HEAD)\necho \"\"Latest local commit: $LATEST_COMMIT\"\"\n\n# Verify remote has same commit\nREMOTE_COMMIT=$(git ls-remote origin HEAD | cut -f1)\necho \"\"GitHub remote commit: $REMOTE_COMMIT\"\"\n\nif [ \"\"$LATEST_COMMIT\"\" = \"\"$REMOTE_COMMIT\"\" ]; then\n  echo \"\"‚úÖ VERIFIED: GitHub has latest OAuth implementation\"\"\nelse\n  echo \"\"‚ùå ERROR: GitHub remote doesn''t match local commit\"\"\nfi)",
      "Bash(# CRITICAL: Deploy from GitHub to Vercel\necho \"\"=== DEPLOYING TO PRODUCTION ===\"\"\nvercel --prod --force --yes)",
      "Bash(# Test all critical routes\necho \"\"=== PRODUCTION ROUTE TESTING ===\"\"\necho \"\"Testing root route:\"\"\ncurl -I https://napoleonai.app/ | head -1\n\necho \"\"Testing prototype route:\"\"  \ncurl -I https://napoleonai.app/prototype | head -1\n\necho \"\"Testing Gmail callback route:\"\"\ncurl -I https://napoleonai.app/auth/gmail/callback | head -1\n\necho \"\"Testing Slack callback route:\"\"\ncurl -I https://napoleonai.app/auth/slack/callback | head -1\n\n# ALL must return HTTP 200 status\necho \"\"‚úÖ All routes must return 200 OK status\"\")",
      "mcp__playwright__browser_snapshot",
      "Bash(# Add all changes\ngit add .\n\n# Verify staging\ngit status\necho \"\"Staged files: $(git diff --cached --name-only | wc -l)\"\")",
      "Bash(# CRITICAL: Push to GitHub\ngit push origin main\n\n# Verify push success\ngit log --oneline -2\necho \"\"‚úÖ GitHub push verification complete\"\")",
      "Bash(# Wait for deployment and verify\nsleep 30\n\n# Verify deployment\necho \"\"=== DEPLOYMENT VERIFICATION ===\"\"\nvercel logs --prod | head -20)",
      "Bash(# Test all critical routes\necho \"\"=== PRODUCTION ROUTE TESTING ===\"\"\necho \"\"Testing root route:\"\"\ncurl -I https://napoleonai.app/ | head -1\n\necho \"\"Testing prototype route:\"\"  \ncurl -I https://napoleonai.app/prototype | head -1\n\necho \"\"Testing Gmail OAuth route:\"\"\ncurl -I https://napoleonai.app/auth/gmail | head -1\n\necho \"\"Testing Slack OAuth route:\"\"\ncurl -I https://napoleonai.app/auth/slack | head -1\n\n# ALL must return HTTP 200 or 302 status\necho \"\"‚úÖ OAuth routes should return 302 redirects to consent screens\"\")",
      "Bash(# Scan for specific error patterns\necho \"\"=== SCANNING FOR COMMON ERROR PATTERNS ===\"\"\nfind src/ -name \"\"*.ts\"\" -o -name \"\"*.tsx\"\" | xargs grep -n \"\"error.message\"\" | head -20)",
      "Bash(# MANDATORY: Verify push succeeded\nsleep 10\nREMOTE_COMMIT=$(git ls-remote origin main | cut -f1)\nLOCAL_COMMIT=$(git rev-parse HEAD)\n\necho \"\"üìä PUSH VERIFICATION:\"\"\necho \"\"Local commit:  $LOCAL_COMMIT\"\"\necho \"\"Remote commit: $REMOTE_COMMIT\"\"\n\nif [ \"\"$LOCAL_COMMIT\"\" = \"\"$REMOTE_COMMIT\"\" ]; then\n  echo \"\"‚úÖ GITHUB SYNCHRONIZATION CONFIRMED - PROCEEDING TO DEPLOYMENT\"\"\nelse\n  echo \"\"‚ùå GITHUB SYNC FAILED - EMERGENCY PROTOCOL ACTIVATED\"\"\n  \n  # Emergency GitHub sync protocol\n  git fetch origin\n  git rebase origin/main\n  git push origin main --force\nfi)"
    ],
    "deny": []
  }
}